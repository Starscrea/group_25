{
	"info": {
		"_postman_id": "623ec703-6928-46b6-a286-9a50dbbc7f31",
		"name": "HW_3_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token;\r",
							"console.log(\"TOKEN = \" + resp_token)\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "password",
							"value": "32167",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"\t\t\t\t\t\t\"type\" : \"object\",\r",
							"\t\t\t\t\t\t\"properties\" : {\r",
							"\t\t\t\t\t\t\"person\": {\r",
							"\t\t\t\t\t\t\"type\": \"object\",\r",
							"\t\t\t\t\t\t\"properties\": {\r",
							"\t\t\t\t\t\t\"u_age\": { \"type\": \"number\" },\r",
							"\t\t\t\t\t\t\"u_name\": {\r",
							"\t\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\t\"items\": [\r",
							"\t\t\t\t\t\t    { \"type\": \"string\" },\r",
							"\t\t\t\t\t\t\t{ \"type\": \"number\" },\r",
							"\t\t\t\t\t\t\t{ \"type\": \"number\" }\r",
							"\t\t\t\t\t\t\t]\r",
							"\t\t\t\t\t\t},\r",
							"\t\t\t\t\t\t\"u_salary_1_5_year\": { \"type\": \"number\" }\r",
							"\t\t\t\t\t\t},\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"qa_salary_after_12_months\": { \"type\": \"number\" },\r",
							"\t\t\t\t\t\"qa_salary_after_6_months\": { \"type\": \"number\" },\r",
							"\t\t\t\t\t\"start_qa_salary\": { \"type\": \"number\" }\r",
							"\t\t\t\t\t\t\t}\r",
							"\t\t\t\t\t\t\t};\r",
							"\tpm.test(\"Проверка_структуры_json_в_ответе\", () => {\r",
							"\tpm.response.to.have.jsonSchema(schema);\r",
							"\t\t\t\t\t\t\t});\r",
							"\t\t\t\t\t\t\t\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"    var jsonData = pm.response.json();\r",
							"\tconsole.log(jsonData);\r",
							"    var request = JSON.parse(request.data);\r",
							"      \r",
							"\tpm.test(\"qa_salary_after_6_months\", function(){\r",
							"\t\tpm.expect(jsonData.qa_salary_after_6_months).to.eql(request.salary*2);\r",
							"\t});\r",
							"\r",
							"\tpm.test(\"qa_salary_after_12_months\", function(){\r",
							"\t\tpm.expect(jsonData.qa_salary_after_12_months).to.eql(request.salary*2.9);\r",
							"\t});\r",
							"\r",
							"    pm.test(\"u_salary_1_5_year\", function(){\r",
							"\t\tpm.expect(jsonData.person.u_salary_1_5_year).to.eql(request.salary*4);\r",
							"\t});\r",
							"\r",
							"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);\r",
							"    //потом в body запроса http://162.55.220.72:5005/get_test_user в поле salary вводим {{u_salary_1_5_year}}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\": 34,\r\n\"salary\": 1000,\r\n\"name\": \"Andrey\",\r\n\"auth_token\": \"/s34lfgbj/Andrey/jjd909/73876kjkWpqc247332167370747evny\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2) Проверка структуры json в ответе.\r",
							"    var schema = {\r",
							"\t\t\"type\" : \"object\",\r",
							"\t\t\"properties\" : {\r",
							"\t\t\t\"age\" : { \"type\" : \"number\" },\r",
							"\t\t\t\"name\" : { \"type\" : \"string\" },\r",
							"\t\t\t    \"salary\" : {\r",
							"\t\t\t\t\"type\" : \"array\",\r",
							"\t\t\t\t\"items\" : [\r",
							"\t\t\t\t\t{\"type\" : \"number\"},\r",
							"                    {\"type\" : \"string\"},\r",
							"                    {\"type\" : \"string\"}\r",
							"\t\t\t\t\t]\r",
							"\t\t\t\t\t}\r",
							"        \t\t\t    }\t\t\t\r",
							"                };\r",
							"    pm.test(\"Проверка_структуры_json_в_ответе\", () => {\r",
							"\tpm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"    var jsonData = pm.response.json();\r",
							"\tvar salary = jsonData.salary[0]\r",
							"\tvar salary_2 = +jsonData.salary[1]\r",
							"\tvar salary_3 = +jsonData.salary[2]\r",
							"    var request = request.data\r",
							"\r",
							"    pm.test(\"Check_salary_2\", function(){\r",
							"    pm.expect(salary_2).to.eql(request.salary*2);\r",
							"})\r",
							"    pm.test(\"Check_salary_3\", function(){\r",
							"\tpm.expect(salary_3).to.eql(request.salary*3);\r",
							"});\r",
							"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"    pm.test(\"2-й_элемент_массива_salary_больше_1-го_и_0-го\", () => {\r",
							"\tpm.expect(salary_3).to.be.above(salary, salary_2);\r",
							"});\r",
							"//\tpm.test(\"2-й_элемент_массива_salary_больше_1-го\", () => {\r",
							"//\tpm.expect(salary_3).to.be.above(salary_2);\r",
							"//});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"\t\"type\" : \"object\",\r",
							"\t\"properties\" : {\r",
							"\t\t\t\t\t\"age\" : { \"type\" : \"number\" },\r",
							"\t\t\t\t\t\"name\" : { \"type\" : \"string\" },\r",
							"\t\t\t\t\t\"daily_food\" : { \"type\" : \"number\" },\r",
							"\t\t\t\t\t\"daily_sleep\" : { \"type\" : \"number\" }\r",
							"\t\t\t\t\t}\r",
							"\t\t\t};\r",
							"\r",
							"    pm.test(\"Проверка_структуры_json_в_ответе\", () => {\r",
							"\tpm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"    var jsonData = pm.response.json();\r",
							"    var weight = request.data.weight\r",
							"\tconsole.log(weight);\r",
							"\t\r",
							"\tpm.test(\"Проверка_daily_food\", function(){\r",
							"\tpm.expect(jsonData.daily_food).to.eql(weight*0.012);\r",
							"});\r",
							"\tpm.test(\"Проверка_daily_sleep\", function(){\r",
							"\tpm.expect(jsonData.daily_sleep).to.eql(weight*2.5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{weight}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2) Проверка структуры json в ответе.\r",
							"    var schema = {\r",
							"\t\t\"type\": \"object\",\r",
							"\t\t\"properties\": {\r",
							"\t\t\t\"age\": {\"type\": \"string\"},\r",
							"\t\t\t\"family\": {\r",
							"\t\t\"type\": \"object\",\r",
							"\t\t\"properties\": {\r",
							"\t\t\t\"children\": {\r",
							"\t\t\t\"type\": \"array\",\r",
							"\t\t\t\"items\": [\r",
							"\t\t\t\t\t{\"type\": \"array\",\r",
							"\t\t\t\t\t\"items\": [\r",
							"\t\t\t\t\t    { \"type\": \"string\"},\r",
							"\t\t\t\t\t\t{ \"type\": \"integer\"}\r",
							"\t\t\t\t\t\t   ]\r",
							"},\r",
							"\t\t\t\t\t\t{\r",
							"\t\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\t\"items\": [\r",
							"\t\t\t\t\t\t    {\"type\": \"string\"},\r",
							"\t\t\t\t\t\t\t{ \"type\": \"integer\" }\r",
							"                                ]\r",
							"\t\t\t\t\t\t}\r",
							"\t\t\t\t\t]\r",
							"\t\t\t\t\t\t},\r",
							"\t\t\t\t\t\t\"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"name\": {\"type\": \"string\" },\r",
							"\t\t\t\t\t\"salary\": {\"type\": \"integer\"}\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t}\r",
							"\r",
							"    pm.test(\"Проверка_структуры_json_в_ответе\", () => {\r",
							"\tpm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"//3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"var field_name = request.data.name;\r",
							"var n_environment = pm.environment.get('name');\r",
							"console.log(\"field_name = \" + field_name)\r",
							"console.log(\"n_environment\", n_environment)\r",
							"\r",
							"pm.test(\"field_name = environment {{name}}\", function(){\r",
							"pm.expect(field_name).to.eql(n_environment); \r",
							"});\r",
							"\t\r",
							"//4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"var jsonData = pm.response.json();\r",
							"var age = request.data.age;\r",
							"pm.test(\"age_in_request  =  age_in_response\", function(){\r",
							"pm.expect(jsonData.age).to.eql(age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"var number = Math.floor(Math.random() * 302); \r",
							"console.log(number);\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData[number]);\r",
							"console.log(\"Cur_ID is \" + jsonData[number].Cur_ID);\r",
							"pm.environment.set(\"Cur_ID\", +jsonData[number].Cur_ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2) Проверка структуры json в ответе.\r",
							"    var schema = {\r",
							"\t\t\"type\" : \"object\",\r",
							"\t\t\"properties\" : {\r",
							"\t\t\"Cur_Abbreviation\" : {\"type\" : \"string\"},\r",
							"\t\t\"Cur_ID\" : {\"type\" : \"integer\"},\r",
							"\t\t\"Cur_Name\" : {\"type\" : \"string\"},\r",
							"\t\t\"Cur_OfficialRate\" : {\"type\" : \"number\"},\r",
							"\t\t\"Cur_Scale\" : {\"type\" : \"number\"},\r",
							"\t\t\"Date\" : {\"type\" : \"string\"}\r",
							"\t\t}\r",
							"    };\r",
							"    pm.test(\"Проверка_структуры_json_в_ответе\", () => {\r",
							"\tpm.response.to.have.jsonSchema(schema);\r",
							"\t});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}
{
	"info": {
		"_postman_id": "1a078304-f242-433e-a273-70bcc9040e2b",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"\r",
							"    pm.test(\"Body matches string\", function () {\r",
							"        pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"    console.log(jsonData);\r",
							"        pm.test(\"name в ответе равно name s request\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(\"Andrey\")\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"    pm.test(\"age в ответе равно age s request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"34\")\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"    pm.test(\"salary в ответе равно salary s request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000)\r",
							"});\r",
							"//7. Спарсить request.\r",
							"    var request = request.data;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test(\"name в ответе равно name s request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.name)\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    pm.test(\"age в ответе равно age s request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request.age)\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"    pm.test(\"salary в ответе равно salary s request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+request.salary)\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"    console.log(jsonData.family);\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"    pm.test(\"u_salary_1_5_year в ответе равно salary*4\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary*4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"    var request = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test(\"name в ответе равно name s request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.name)\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    pm.test(\"age в ответе равно age s request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request.age)\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"    pm.test(\"salary в ответе равно salary s request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+request.salary)\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"    console.log(jsonData.family);\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"    pm.test(\"У_параметра_dog_есть_параметр_name\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"    pm.test(\"У_параметра_dog_есть_параметр_age\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"    pm.test(\"Параметр_name_имеет_значение_Luky.\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.be.oneOf([\"Luky\"])\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"    pm.test(\"Параметр_age_имеет_значение_4.\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.be.oneOf([4])\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Andrey&age=34&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"    var request = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test(\"name в ответе равно name s request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.name)\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"    pm.test(\"age в ответе равно age из request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+request.age)\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"    console.log(\"Salary = \" + request.salary);\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"    console.log(\"Salary = \" + jsonData.salary);\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"    var salary_0 = jsonData.salary[0];\r",
							"    console.log(\"0-й_элемент_параметра_salary = \" + salary_0);\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"    var salary_1 = jsonData.salary[1];\r",
							"    console.log(\"1-й_элемент_параметра_salary = \" + salary_1);\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"    var salary_2 = jsonData.salary[2];\r",
							"    console.log(\"2-й_элемент_параметра_salary = \" + salary_2);\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"    pm.test(\"0-й элемент параметра salary равен salary из request\", function () {\r",
							"    pm.expect(salary_0).to.eql(+request.salary)\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"    pm.test(\"1-й элемент параметра salary равен salary*2 из request\", function () {\r",
							"    pm.expect(+salary_1).to.eql(+request.salary*2)\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"    pm.test(\"2-й элемент параметра salary равен salary*3 из request\", function () {\r",
							"    pm.expect(+salary_2).to.eql(+request.salary*3)\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"        //Зайти во вкладку Enviroments > выбрать своё окружение > добавить переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"         //Зайти во вкладку Enviroments > выбрать своё окружение > добавить переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"        //Зайти во вкладку Enviroments > выбрать своё окружение > добавить переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"    pm.environment.set(\"name\", jsonData.name);\r",
							"//19. Передать в окружение переменную age\r",
							"    pm.environment.set(\"age\", jsonData.age);\r",
							"//20. Передать в окружение переменную salary\r",
							"    pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"    for (i = 0; i < jsonData.salary.length; i++){\r",
							"\tconsole.log(\"salary_cycle\", jsonData.salary[i]);\r",
							"\t}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Andrey&age=34&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"    // зайти в body запроса > form-data > в столбце KEY ввести salary, в столбце VALUE ввести {{salary}}\r",
							"//2. Вставить параметр age из окружения в age\r",
							"    // зайти в body запроса > form-data > в столбце KEY ввести age, в столбце VALUE ввести {{age}}\r",
							"//3. Вставить параметр name из окружения в name\r",
							"    // зайти в body запроса > form-data > в столбце KEY ввести name, в столбце VALUE ввести {{name}}\r",
							"//4. Отправить запрос.\r",
							"    //SEND\r",
							"//5. Статус код 200\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"//7. Спарсить request.\r",
							"    var req = request.data;\r",
							"    console.log(req);\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"    pm.test(\"json response имеет параметр start_qa_salary\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"    pm.test(\"json response имеет параметр qa_salary_after_6_months\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"    pm.test(\"json response имеет параметр qa_salary_after_12_months\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"    pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"    pm.test(\"json response имеет параметр qa_salary_after_3.5_years\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"    pm.test(\"json response имеет параметр person\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"})\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"    pm.test(\"параметр start_qa_salary равен salary из request\", function() {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"})\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"    pm.test(\"параметр qa_salary_after_6_months равен salary*2 из request\", function() {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"})\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"    pm.test(\"параметр qa_salary_after_12_months равен salary*2.7\", function() {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
							"})\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"    pm.test(\"параметр qa_salary_after_1.5_year равен salary*3.3 из request\", function(){\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3)\r",
							"})\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"    pm.test(\"параметр qa_salary_after_3.5_years равен salary*3.8 из request\", function(){\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8)\r",
							"})\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"    pm.test(\"в параметре person, 1-й элемент из u_name равен salary из request\", function(){\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary)\r",
							"})\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"    pm.test(\"параметр u_age равен age из request\", function(){\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age)\r",
							"})\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"    pm.test(\"параметр u_salary_5_years равен salary*4.2 из request\", function(){\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary*4.2)\r",
							"})\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"   // for (let i in jsonData.person){,\r",
							"  //  console.log(\"Property:\", + i, + \"property value:\", + jsonData.person[i]);\r",
							"   //for (i = 0; i < jsonData.person.length; i++){\r",
							"\t//console.log(\"Person_Data :\" + jsonData.person);\r",
							"\t//}\r",
							"//})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
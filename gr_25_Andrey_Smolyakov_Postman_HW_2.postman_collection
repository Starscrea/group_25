{
	"info": {
		"_postman_id": "1a078304-f242-433e-a273-70bcc9040e2b",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"\r",
							"    pm.test(\"Body matches string\", function () {\r",
							"        pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"    console.log(jsonData);\r",
							"        pm.test(\"name\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(\"Andrey\")\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"    pm.test(\"age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"34\")\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"    pm.test(\"salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000)\r",
							"});\r",
							"//7. Спарсить request.\r",
							"    var request = request.data;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test(\"name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.name)\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    pm.test(\"age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request.age)\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"    pm.test(\"salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+request.salary)\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"    console.log(jsonData.family);\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"    pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary*4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"    var request = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test(\"name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.name)\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    pm.test(\"age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request.age)\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"    pm.test(\"salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+request.salary)\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"    console.log(jsonData.family);\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"    pm.test(\"У_параметра_dog_есть_параметр_name\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"    pm.test(\"У_параметра_dog_есть_параметр_age\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"    pm.test(\"Параметр_name_имеет_значение_Luky.\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.be.oneOf([\"Luky\"])\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"    pm.test(\"Параметр_age_имеет_значение_4.\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.be.oneOf([4])\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Andrey&age=34&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"    var request = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test(\"name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.name)\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"    pm.test(\"age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+request.age)\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"    console.log(\"Salary = \" + request.salary);\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"    console.log(\"Salary = \" + jsonData.salary);\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"    var salary_0 = jsonData.salary[0];\r",
							"    console.log(\"0-й_элемент_параметра_salary = \" + salary_0);\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"    var salary_1 = jsonData.salary[1];\r",
							"    console.log(\"1-й_элемент_параметра_salary = \" + salary_1);\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"    var salary_2 = jsonData.salary[2];\r",
							"    console.log(\"2-й_элемент_параметра_salary = \" + salary_2);\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"    pm.test(\"0-й_элемент_Salary\", function () {\r",
							"    pm.expect(salary_0).to.eql(+request.salary)\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"    pm.test(\"1-й_элемент_Salary\", function () {\r",
							"    pm.expect(+salary_1).to.eql(+request.salary*2)\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"    pm.test(\"2-й_элемент_Salary\", function () {\r",
							"    pm.expect(+salary_2).to.eql(+request.salary*3)\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"        //Зайти во вкладку Enviroments > выбрать своё окружение > добавить переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"         //Зайти во вкладку Enviroments > выбрать своё окружение > добавить переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"        //Зайти во вкладку Enviroments > выбрать своё окружение > добавить переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"    pm.environment.set(\"name\", jsonData.name);\r",
							"//19. Передать в окружение переменную age\r",
							"    pm.environment.set(\"age\", jsonData.age);\r",
							"//20. Передать в окружение переменную salary\r",
							"    pm.environment.set(\"salary\", jsonData.salary);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"    for (i = 0; i < jsonData.salary.length; i++){\r",
							"\tconsole.log(\"salary_cycle\", jsonData.salary[i]);\r",
							"\t}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Andrey&age=34&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	]
}